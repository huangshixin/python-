为什么需要数据库设计

1、可能需要面对很多问题，以及哪些数据存储到表中呢？
2、数据表中数据的正确性，当插入、删除、更新的时候该怎么进行约束检查；
3、如何让用户维护着更方便的使用数据库


如果糟糕的数据库设计可能会造成一下的问题：

数据冗余、信息重复、存储空间浪费
数据更新、插入、删除
无法正确表示信息
丢失有的信息



范式： 在关系型数据库中，关于数据表的设计的基本原则、规则就称为范式；【级别是不断递增的】

键和相关属性的概念：

1、超键：能够唯一标识的属性集
2、候选键：如果超建不包含多余的属性，那么这：个超键就是候选键；
3、主键：用户可以从候选键中选择一个作为主键
4、外键“如果数据表R1中的某属性集不是R1的主键，而是另一个数据表R2的主键
5、主属性：包含在任一候选键中的属性称为主属性；
6、非主属性：抛开主属性以外的



第一范式：---记住---每个属性都是不可分的


      确保数据表中每个字段的值必须具有【原子性】---不可拆
      【这个数据只能有一个属性，但是属性的原子性---是主观的】
      
      
      【案例】
      一个用户表有四个字段，其中一个字段user_info 包含多种东西，比如 姓名、电话、住址
      【则它不满足第一范式】
      
      
第二范式”---每个非主属性都是【完全依赖】于主属性的，且必须有主属性，使得每一条记录可以被唯一标识

      在第一范式的基础上，还要“满足数据表里的每一条数据记录，都是可唯一标识的。”
      【举例】
      成绩表(学号，课程号，成绩）  学号和课程号---决定了成绩；
      ############################################################################
      比赛表 player_game 球员编号、姓名、年龄、比赛编号；
      （球员编号、比赛编号） ---(姓名、年龄、比赛时间、比赛传递、得分）
      [它不满足第二范式]，姓名和年龄只依赖球员编号，所以非主属性不是完全依赖全部的主属性；
      
      
      
第三范式：
    
    非主键字段，必须和主键字段-----直接相关；【不能有传递依赖】
    
    不能是 主键查到 一个字段，然后一个字段，又可以查到新的字段；




范式的严格度是逐步增加的；

        
      
      
      


      














